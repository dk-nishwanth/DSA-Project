generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  ADMIN
  INSTRUCTOR
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

enum TopicCategory {
  DATA_STRUCTURES
  ALGORITHMS
  CONCEPTS
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum AssignmentDifficulty {
  EASY
  MEDIUM
  HARD
}

enum AssignmentCategory {
  ARRAYS
  STRINGS
  LINKED_LISTS
  TREES
  GRAPHS
  DYNAMIC_PROGRAMMING
  GREEDY
  OTHER
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_BLANK
  CODE_COMPLETION
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SUBMITTED
}

model User {
  id                 String               @id @default(cuid())
  username           String               @unique
  email              String               @unique
  password           String               @db.VarChar(255)
  firstName          String
  lastName           String
  role               UserRole             @default(STUDENT)
  isApproved         Boolean              @default(false)
  profilePicture     String?
  bio                String?              @db.Text
  isActive           Boolean              @default(true)
  lastLogin          DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  loginEvents        LoginEvent[]
  createdTopics      Topic[]              @relation("TopicCreatedBy")
  updatedTopics      Topic[]              @relation("TopicUpdatedBy")
  createdAssignments Assignment[]         @relation("AssignmentCreatedBy")
  updatedAssignments Assignment[]         @relation("AssignmentUpdatedBy")
  createdQuizzes     Quiz[]               @relation("QuizCreatedBy")
  updatedQuizzes     Quiz[]               @relation("QuizUpdatedBy")
  progress           Progress?
  
  @@map("users")
}

model Admin {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  password   String    @db.VarChar(255)
  isApproved Boolean   @default(false)
  role       AdminRole @default(ADMIN)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("admins")
}

model Topic {
  id             String         @id @default(cuid())
  title          String         @db.VarChar(100)
  slug           String         @unique
  description    String         @db.VarChar(500)
  category       TopicCategory
  difficulty     Difficulty
  
  overview       String         @db.Text
  explanation    String         @db.Text
  pseudocode     String         @db.Text
  codeSnippets   Json
  complexity     Json
  examples       Json
  visualizations Json
  whyItMatters   String         @db.Text
  realWorldApps  Json
  
  prerequisites  Json
  estimatedTime  Int
  isPublished    Boolean        @default(false)
  order          Int            @default(0)
  tags           Json
  
  createdById    String
  updatedById    String
  createdBy      User           @relation("TopicCreatedBy", fields: [createdById], references: [id])
  updatedBy      User           @relation("TopicUpdatedBy", fields: [updatedById], references: [id])
  
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  relatedTopics  TopicRelation[] @relation("ParentTopic")
  relatedFrom    TopicRelation[] @relation("RelatedTopic")
  progress       TopicProgress[]

  @@map("topics")
}

model TopicRelation {
  id             String @id @default(cuid())
  parentTopicId  String
  relatedTopicId String
  parentTopic    Topic  @relation("ParentTopic", fields: [parentTopicId], references: [id], onDelete: Cascade)
  relatedTopic   Topic  @relation("RelatedTopic", fields: [relatedTopicId], references: [id], onDelete: Cascade)

  @@unique([parentTopicId, relatedTopicId])
  @@map("topic_relations")
}

model Assignment {
  id               String               @id @default(cuid())
  title            String               @db.VarChar(100)
  description      String               @db.VarChar(1000)
  problemStatement String               @db.Text
  difficulty       AssignmentDifficulty
  category         AssignmentCategory
  
  constraints      Json
  examples         Json
  testCases        Json
  starterCode      Json
  solution         Json
  hints            Json
  
  timeLimit        Int                  @default(1000)
  memoryLimit      Int                  @default(128)
  points           Int                  @default(10)
  isPublished      Boolean              @default(false)
  tags             Json
  
  createdById      String
  updatedById      String
  createdBy        User                 @relation("AssignmentCreatedBy", fields: [createdById], references: [id])
  updatedBy        User                 @relation("AssignmentUpdatedBy", fields: [updatedById], references: [id])
  
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt

  progress         AssignmentProgress[]

  @@map("assignments")
}

model Quiz {
  id           String        @id @default(cuid())
  title        String        @db.VarChar(100)
  description  String        @db.VarChar(500)
  category     TopicCategory
  difficulty   Difficulty
  
  questions    Json
  timeLimit    Int           @default(0)
  passingScore Int           @default(70)
  maxAttempts  Int           @default(0)
  isPublished  Boolean       @default(false)
  tags         Json
  
  createdById  String
  updatedById  String
  createdBy    User          @relation("QuizCreatedBy", fields: [createdById], references: [id])
  updatedBy    User          @relation("QuizUpdatedBy", fields: [updatedById], references: [id])
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  progress     QuizProgress[]

  @@map("quizzes")
}

model Progress {
  id                     String @id @default(cuid())
  userId                 String @unique
  user                   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  overallScore           Int    @default(0)
  totalTopics            Int    @default(0)
  completedTopics        Int    @default(0)
  totalAssignments       Int    @default(0)
  completedAssignments   Int    @default(0)
  totalQuizzes           Int    @default(0)
  completedQuizzes       Int    @default(0)
  streakDays             Int    @default(0)
  lastActivityDate       DateTime @default(now())
  
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  topicProgress          TopicProgress[]
  assignmentProgress     AssignmentProgress[]
  quizProgress           QuizProgress[]

  @@map("progress")
}

model TopicProgress {
  id               String         @id @default(cuid())
  progressId       String
  topicId          String
  progress         Progress       @relation(fields: [progressId], references: [id], onDelete: Cascade)
  topic            Topic          @relation(fields: [topicId], references: [id], onDelete: Cascade)
  
  status           ProgressStatus @default(NOT_STARTED)
  timeSpent        Int            @default(0)
  lastAccessed     DateTime       @default(now())
  completedAt      DateTime?
  quizScores       Json
  assignmentScores Json

  @@unique([progressId, topicId])
  @@map("topic_progress")
}

model AssignmentProgress {
  id               String         @id @default(cuid())
  progressId       String
  assignmentId     String
  progress         Progress       @relation(fields: [progressId], references: [id], onDelete: Cascade)
  assignment       Assignment     @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  
  status           ProgressStatus @default(NOT_STARTED)
  submission       Json?
  testResults      Json?
  score            Int            @default(0)
  maxScore         Int
  timeSpent        Int            @default(0)
  attempts         Int            @default(0)
  lastAttemptAt    DateTime?
  completedAt      DateTime?

  @@unique([progressId, assignmentId])
  @@map("assignment_progress")
}

model QuizProgress {
  id            String         @id @default(cuid())
  progressId    String
  quizId        String
  progress      Progress       @relation(fields: [progressId], references: [id], onDelete: Cascade)
  quiz          Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  status        ProgressStatus @default(NOT_STARTED)
  score         Int            @default(0)
  maxScore      Int
  percentage    Int            @default(0)
  timeSpent     Int            @default(0)
  answers       Json
  startedAt     DateTime?
  completedAt   DateTime?
  attempts      Int            @default(0)
  maxAttempts   Int            @default(0)

  @@unique([progressId, quizId])
  @@map("quiz_progress")
}

model LoginEvent {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ip        String?
  userAgent String?  @db.Text
  createdAt DateTime @default(now())

  @@map("login_events")
}

